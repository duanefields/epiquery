#!/usr/bin/env ./node_modules/coffee-script/bin/coffee

tedious   = require 'tedious'
path      = require 'path'
express   = require 'express'
fs        = require 'fs'
dot       = require 'dot'
util      = require 'util'
_         = require 'underscore'
Q         = require 'q'
mustache  = require 'hogan.js'
crypto    = require 'crypto'


config =
  sql:
    userName: process.env.npm_package_config_db_user
    password: process.env.npm_package_config_db_password
    server:   process.env.npm_package_config_db_host
    options:
      port:   process.env.npm_package_config_db_port
  template_directory: process.env.npm_package_config_template_directory


# setting up some real simple logging
log =
  error: (message) -> util.log "[ERROR] #{message}"
  info:  (message) -> util.log "[INFO] #{message}"
  warn:  (message) -> util.log "[WARN] #{message}"
  debug: (message) ->
    if process.env.DEBUG
      util.log "[DEBUG] #{message}"
  event: (message) ->
    if process.env.DEBUG
      util.log "[EVENT] #{message}"

console.log = log.info

##########################################################
# <template rendering>

# whitespace is important, we don't want to strip it
dot.templateSettings.strip = false

renderers = {}
renderers[".dot"] =  (template, context) ->
  templateFn = dot.template template
  templateFn context

renderers[".mustache"] =  (template_string, context) ->
  template = mustache.compile template_string
  template.render context

renderers[".error"] = () ->
  pants_are cool
  throw "pants"

# set our default handler
renderers[""] = (template_string) ->
  template_string

get_renderer_for_template = (template_path) ->
  renderers[path.extname template_path]
# </template rendering>
##########################################################

class DeferManager
  constructor: (@name) ->
    @requested = {}

  _trackerToString: (tracker) ->
    log_items =
      name: tracker.name
      data: tracker.deferred.promise.valueOf()
      hooked: tracker.hooked
      isPending: tracker.deferred.promise.isPending()
      isRejected: tracker.deferred.promise.isRejected()
      isFulfilled: tracker.deferred.promise.isFulfilled()
    JSON.stringify(log_items)

  createEventResolver: (name) =>
    tracker = @_getTrackerNamed name
    tracker.hooked = true
    createHandler = (tracker) =>
      () =>
        tracker.deferred.resolve()
    createHandler tracker

  createCallbackHandler: (name) =>
    o = @_getTrackerNamed name
    o.hooked = true
    o.deferred.makeNodeResolver()

  _getTrackerNamed: (name) =>
    if typeof(@requested[name]) is "undefined"
      deferred = Q.defer()
      tracker =
        deferred: deferred,
        hooked: false,
        name: name
      deferred.promise.fin () => log.debug @_trackerToString tracker
      @requested[name] = tracker
    @requested[name]

  getPromise: (name) =>
    @getPromises(name)

  getPromises: (name_or_list) =>
    names = name_or_list
    promises = []
    if not _.isArray(name_or_list)
      names = [name_or_list]
    # todo: this one shouldn't create, it really needs to throw if
    # there's no matching promise
    for name in names
      promises.push @_getTrackerNamed(name).deferred.promise
    if promises.length is 1
      return promises[0]
    else
      return promises

  allPromised: () =>
    Q.all(_.map(@requested, (v, k, o) -> v.deferred.promise))


exec_query = (template_name, template_context, callback) ->
  manager = new DeferManager('Used To Keep Track Of Our Deferreds')
  result_sets = []
  row_data = null
  conn = new tedious.Connection config.sql
  conn.on 'errorMessage', (message) -> log.error JSON.stringify(message)
  conn.on 'connect', manager.createEventResolver 'connect'
  conn.on 'end', manager.createEventResolver 'connect-end'

  # need to read our template to get the contents
  fs.readFile(path.join(path.normalize(config.template_directory), template_name),
    {encoding:'utf8'},
    manager.createCallbackHandler 'template')

  # once we have a connection and our template contents, then we can continue
  Q.all(manager.getPromises ['template', 'connect']).spread(
    # a resolved connect has no arguments so we'll get our template argument first
    (template, ___) ->
      renderer = get_renderer_for_template template_name
      rendered = renderer template, template_context
      log.debug "rendered template\n #{rendered}"
      request = new tedious.Request(rendered, manager.createCallbackHandler('request-complete'))
      # make sure that no matter how our request-complete event ends, we close the connection
      manager.getPromises('request-complete').fin () -> conn.close()
      manager.getPromise('request-complete').then () ->
        if row_data isnt null
          result_sets.push(row_data)
        log.event "request-completed #{arguments[0]}, #{arguments[1]}"
      request.on 'done', () -> a=arguments; log.event("done #{a[0]}, #{a[1]}, #{a[2]}")
      request.on 'columnMetadata', () -> log.event("columnMetadata")
      request.on 'doneProc', () -> a=arguments; log.event("doneProc #{a[0]}, #{a[1]}, #{a[2]}, #{a[3]}")
      request.on 'doneInProc', () -> a=arguments; log.event("doneInProc #{a[0]}, #{a[1]}, #{a[2]}")
      request.on 'columnMetadata', () ->
        # first time through we should have a null value
        # after that we'll either have empty arrays or some data to
        # push onto our result sets
        if row_data isnt null
          result_sets.push(row_data)
        row_data = []
      request.on 'row', (columns) -> log.event "row" ; row_data.push(columns)
      conn.execSqlBatch request
  ).fail (error) -> callback error, result_sets # something in the spread failed

  manager.getPromise('connect-end').then () ->
    # this is silly, but... there's a case where tedious will fail to
    # connect but not raise a connect(err) event instead going straight to
    # raising 'end'.  So from the normal processing path, this should be
    # raised by the close of the connection which is done on the request-complete
    # trigger and we should then be done anyway so this will simply be redundant
    manager._getTrackerNamed('connect').deferred.resolve()

  manager.allPromised().then(
    () -> callback null, result_sets
  ).fail(
    (error) -> callback error, result_sets
  )

escape_for_sql = (value) ->
  if isNaN value
    value = value.replace(/'/g, "''")
  value

request_handler = (req, resp) ->
  # combining the body and query so they can be use for the context of the template render
  context = _.extend {}, req.body, req.query

  # check to see if we're running a 'development' request
  # really, this isn't for production so don't expect it to 
  # perform, as a matter of face, we're using sync calls here
  if context["__template"]
    hasher = crypto.createHash 'sha1'
    hasher.update context["__template"]
    template_type = context["__template_type"] || "mustache"
    temp_template_path = "debug/#{hasher.digest('hex')}.#{template_type}"
    temp_file_path = path.join(path.normalize(config.template_directory), temp_template_path)
    log.debug "writing template contents to tmp file at #{temp_file_path}"
    fs.writeFileSync temp_file_path, context["__template"]
    # we're gonna overwrite the incoming url so that we can use our standard
    # path for request handling, it's a bit like a redirect
    req.url = "/#{temp_template_path}"

  # escape things so nothing nefarious gets by
  _.each context, (v, k, o) -> o[k] = escape_for_sql(v)
  # we allow people to provide any path relative to the templates directory
  # so we'll remove the initial / and keep the rest of the path while conveniently
  # dropping any parent indicators (..)
  exec_query req.path[1..].replace(/\.\./g, ''), context, (error, rows) ->
    if error
      resp.statusCode = 500
      log.error "#{error.message}\n#{error.stack}"
      result = {status: "error", message: error.message}
    else
      log.debug JSON.stringify(rows)
      if rows.length > 1 # we have multiple result sets
        log.debug "#{rows.length}(s) result sets returned"
        result = []
        for result_set in rows
          result.push _.map result_set, (columns) ->
            _.object _.map columns, (column) ->
              [column.metadata.colName, column.value]
      else
        log.debug "1 result set returned"
        result = _.map rows[0], (columns) ->
          _.object _.map columns, (column) ->
            [column.metadata.colName, column.value]
    resp.send result

app = express()
app.use express.bodyParser()
app.get '*', request_handler
app.post '*', request_handler
       

log.info "Configuration: #{JSON.stringify config}"
log.info "Starting epi server on port: #{process.env.npm_package_config_http_port}"
app.listen process.env.npm_package_config_http_port
