#!/usr/bin/env ./node_modules/coffee-script/bin/coffee

tedious =   require 'tedious'
path =      require 'path'
express =   require 'express'
fs =        require 'fs'
dot =       require 'dot'
util =      require 'util'
_ =         require 'underscore'
Q =         require 'q'

log = 
  error: (message) -> util.log "[ERROR] #{message}"
  info:  (message) -> util.log "[INFO] #{message}"
  warn:  (message) -> util.log "[WARN] #{message}"
  debug: (message) -> util.log "[DEBUG] #{message}"

console.log = log.info

sql_config =
  userName: process.env.npm_package_config_db_user
  password: process.env.npm_package_config_db_password
  server:   process.env.npm_package_config_db_host
  options:
    port:   process.env.npm_package_config_db_port

class DeferManager
  constructor: (@name) ->
    @requested = {}

  createEventResolver: (name) =>
    o = @_get name
    deferred = o.deferred
    o.hooked = true
    createHandler = (deferred) =>
      () =>
        deferred.resolve()
    createHandler deferred

  createCallbackHandler: (name) =>
    o = @_get name
    deferred = o.deferred
    o.hooked = true
    deferred.makeNodeResolver()

  _get: (name) =>
    if typeof(@requested[name]) is "undefined"
      @requested[name] = {deferred: Q.defer(), hooked: false}
    @requested[name]

  get: (name) =>
    @_get(name).deferred

  getPromises: (name_or_list) =>
    names = name_or_list
    promises = []
    if not _.isArray(name_or_list)
      names = [name_or_list]
    for name in names
      promises.push @get(name).promise
    if promises.length is 1
      return promises[0]
    else
      return promises

  logState: () =>
    _.each @requested, (value,name,o) ->
      log.debug name + ": {hooked: #{value.hooked}, isPending: #{value.deferred.promise.isPending()}}"


exec_query = (template, template_context, callback) ->
  manager = new DeferManager('mine')
  # our messages
  row_data = []
  conn = new tedious.Connection sql_config
  conn.on 'errorMessage', (message) -> log.error(JSON.stringify(message))
  conn.on 'connect', manager.createEventResolver 'connect'
  conn.on 'end', manager.createEventResolver 'connect-end'

  fs.readFile(path.join(process.cwd(), 'templates', template),
    {encoding:'utf8'},
    manager.createCallbackHandler 'template')


  log.info 'setting handler for template load and connect'
  Q.all(manager.getPromises(['template', 'connect'])).then(
    () ->
      log.info 'primary handler invoked'
      templateFn = dot.template manager.get(template)[1]
      rendered = templateFn template_context
      log.debug "rendered template: #{rendered}"
      request = new tedious.Request(rendered, manager.createCallbackHandler('request-complete'))
      request.on 'row', (columns) -> row_data.push(columns)
      conn.execSql request
  )

  manager.getPromises('request-complete').then () ->
    conn.close()
  manager.getPromises('connect-end').then () ->
    manager.logState()
    callback(row_data)

escape_for_sql = (value) ->
  if isNaN value
    value = value.replace(/'/g, "''")
  value

app = express()
app.get '*', (req, resp) ->
  context = _.extend {}, req.body, req.query
  _.each context, (v, k, o) -> o[k] = escape_for_sql(v)
  # we allow people to provide any path relative to the templates directory
  # so we'll remove the initial / and keep the rest of the path while conveniently
  # dropping any parent indicators (..)
  exec_query req.path[1..].replace(/\.\./g, ''), context, (rows) ->
    resp.send _.map rows, (columns) -> 
      _.object _.map columns, (column) ->
        [column.metadata.colName, column.value]
       

log.debug JSON.stringify sql_config
app.listen process.env.npm_package_config_http_port
