#!/usr/bin/env ./node_modules/coffee-script/bin/coffee

tedious =   require 'tedious'
path =      require 'path'
express =   require 'express'
fs =        require 'fs'
dot =       require 'dot'
util =      require 'util'
_ =         require 'underscore'
Q =         require 'q'

log = 
  error: (message) -> util.log "[ERROR] #{message}"
  info:  (message) -> util.log "[INFO] #{message}"
  warn:  (message) -> util.log "[WARN] #{message}"
  debug: (message) -> util.log "[DEBUG] #{message}"

console.log = log.info

sql_config =
  userName: process.env.npm_package_config_db_user
  password: process.env.npm_package_config_db_password
  server:   process.env.npm_package_config_db_host
  options:
    port:   process.env.npm_package_config_db_port

class DeferManager
  constructor: (@name) ->
    @requested = {}

  createEventResolver: (name) =>
    deferred = Q.defer()
    @requested[name] = deferred
    createHandler = (deferred) =>
      () =>
        deferred.resolve()
    createHandler deferred

  createCallbackHandler: (name) =>
    deferred = Q.defer()
    @requested[name] = deferred
    deferred.createNodeResolver()


  logState: () =>
    for name in @requested
      log.debug "#{name} -> pending: #{@requested.name.isPending()}"




  

exec_query = (template, template_context, callback) ->
  # our messages
  e_connect = Q.defer()
  e_connect_end = Q.defer()
  e_template_load = Q.defer()
  e_request_complete = Q.defer()
  row_data = []
  conn = new tedious.Connection sql_config
  log.info 'connection created'
  conn.on 'errorMessage', (message) -> log.error(JSON.stringify(message))
  log.info 'connect: ' + e_connect.promise.isPending()
  conn.on 'connect', () -> e_connect.resolve()
  log.info 'connect event hooked'
  conn.on 'end', () -> e_connect_end.resolve()
  log.info 'end event hooked'

  fs.readFile(path.join(process.cwd(), 'templates', template),
    {encoding:'utf8'},
    e_template_load.makeNodeResolver())
  log.info 'template read hooked'


  log.info 'setting handler for template load and connect'
  Q.all([e_template_load.promise, e_connect.promise]).then(
    () ->
      log.info 'primary handler invoked'
      log.info 'template: ' + e_template_load.promise.isPending()
      log.info 'connect:  ' + e_connect.promise.isPending()
      templateFn = dot.template e_template_load.get(1)
      rendered = templateFn template_context
      log.debug "rendered template: #{rendered}"
      request = new tedious.Request(rendered, e_request_complete)
      request.on 'row', (columns) -> row_data.push(columns)
      conn.execSql request
  )

  log.info 'request complete handler hooked'
  e_request_complete.promise.then () ->
    log.info 'request complete handler invoked'
    conn.close()
  log.info 'connect end handler hooked'
  e_connect_end.promise.then () ->
    log.info 'connect end handler invoked'
    callback(row_data)

escape_for_sql = (value) ->
  if isNaN value
    value = value.replace(/'/g, "''")
  value

app = express()
app.get '*', (req, resp) ->
  context = _.extend {}, req.body, req.query
  _.each context, (v, k, o) -> o[k] = escape_for_sql(v)
  # we allow people to provide any path relative to the templates directory
  # so we'll remove the initial / and keep the rest of the path while conveniently
  # dropping any parent indicators (..)
  exec_query req.path[1..].replace(/\.\./g, ''), context, (rows) ->
    resp.send _.map rows, (columns) -> 
      _.object _.map columns, (column) ->
        [column.metadata.colName, column.value]
       

log.debug JSON.stringify sql_config
app.listen process.env.npm_package_config_http_port
